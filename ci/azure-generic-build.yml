# Copyright 2023 the Tectonic Project
# Licensed under the MIT License.
#
# Azure Pipelines template for a standard build-and-test workflow once
# dependencies have been set up. Besides the parameters, the following variables
# are expected:
#
# - TARGET: the build target triple (e.g. "x86_86-unknown-linux-gnu")
# - TOOLCHAIN: the rust toolchain type (e.g., "stable",
#   "beta-x86_64-pc-windows-msvc")

parameters:
- name: defaultFeatures
  type: boolean
  default: true
- name: explicitFeatures
  type: string
  default: ''

steps:
# We use two variables for feature flagging just because I'm worried about
# quoting the `--features` argument, which will contain spaces.
- bash: |
    ffs=
    fts=

    if [[ $DEFAULT_FEATURES_FLAG == False ]] ; then
      ffs="--no-default-features"
    fi

    if [[ $EXPLICIT_FEATURES == _all_ ]] ; then
      ffs="--all-features"
    else
      fts="$EXPLICIT_FEATURES"
    fi

    echo "Cargo features for this build: $ffs --features=\"$fts\""
    echo "##vso[task.setvariable variable=CARGO_FEATURES_EXPLICIT;]$fts"
    echo "##vso[task.setvariable variable=CARGO_FEATURES_FLAGS;]$ffs"
  displayName: Set feature flags
  env:
    DEFAULT_FEATURES_FLAG: ${{ parameters.defaultFeatures }}
    EXPLICIT_FEATURES: ${{ parameters.explicitFeatures }}

- bash: cargo build --all --target $TARGET --release $CARGO_FEATURES_FLAGS --features="$CARGO_FEATURES_EXPLICIT" -v
  displayName: cargo build for $(TARGET)
