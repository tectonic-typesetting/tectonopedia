# Copyright 2023 the Tectonic Project
# Licensed under the MIT License.
#
# Main build-and-test CI stage

# We cannot use Pipelines' matrixing framework because only it works with
# *runtime variables*, while we want to use templates with *parameters* which
# are evaluated at *compile time* only. By coding our matrixing data as
# top-level parameters, we can use them in compile-time template evaluation
# (`${{ }}` expressions) to achieve a matrixing effect. Only a few *variables*
# can be used at compile time: see "Available in templates?" in the table at:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# This is why some platform-specific steps use `condition:` terms rather than
# compile-time `${{ if }}:` statements.

parameters:
- name: pkgconfigBuilds
  type: object
  default:
  - name: x86_64_unknown_linux_gnu
    vmImage: ubuntu-latest
    params:
      installAllDeps: true
      explicitFeatures: "external-harfbuzz"
    vars:
      TARGET: x86_64-unknown-linux-gnu
      TOOLCHAIN: stable

  - name: x86_64_apple_darwin
    vmImage: macos-latest
    params:
      installAllDeps: true
      explicitFeatures: "external-harfbuzz"
    vars:
      TARGET: x86_64-apple-darwin
      TOOLCHAIN: stable

- name: vcpkgBuilds
  type: object
  default:
  - name: x86_64_pc_windows_msvc
    vmImage: windows-latest
    params: {}
    vars:
      TARGET: x86_64-pc-windows-msvc
      TOOLCHAIN: stable-x86_64-pc-windows-msvc

jobs:

# pkg-config builds
- ${{ each build in parameters.pkgconfigBuilds }}:
  - job: ${{ format('build_{0}_pkgconfig', build.name) }}
    pool:
      vmImage: ${{ build.vmImage }}
    steps:
    - template: azure-build-and-test-pkgconfig.yml
      parameters:
        ${{ insert }}: ${{ build.params }}
    variables:
      ${{ insert }}: ${{ build.vars }}

# vcpkg builds
- ${{ each build in parameters.vcpkgBuilds }}:
  - job: ${{ format('build_{0}_vcpkg', build.name) }}
    pool:
      vmImage: ${{ build.vmImage }}
    steps:
    - template: azure-build-and-test-vcpkg.yml
      parameters:
        ${{ insert }}: ${{ build.params }}
    variables:
      ${{ insert }}: ${{ build.vars }}

# rustfmt check
- job: rustfmt
  pool:
    vmImage: ubuntu-latest
  steps:
    - bash: rustup component add rustfmt
      displayName: "Install rustfmt"
    - bash: cargo fmt --all -- --check
      displayName: "Check rustfmt (cargo)"
  variables:
    TOOLCHAIN: stable

# clippy check
- job: clippy
  pool:
    vmImage: ubuntu-latest
  steps:
    - template: azure-generic-build-setup.yml
    - bash: |
        rustup component add clippy
        cargo clippy --version
      displayName: "Install clippy"
    # Ew, redundant with stock builds:
    - bash: |
        set -xeuo pipefail
        sudo apt-get update
        sudo env DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libgraphite2-dev \
          libharfbuzz-dev \
          libfontconfig1-dev \
          libicu-dev \
          libssl-dev \
          openssl \
          zlib1g-dev
      displayName: "Install pkg-config dependencies (Ubuntu)"
    - bash: cargo clippy --all --all-targets --all-features -- --deny warnings
      displayName: "Check clippy (cargo)"
  variables:
    TOOLCHAIN: stable
